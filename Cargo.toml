[package]
name = "open62541-sys"
version = "0.4.1"
authors = ["HMI Project"]
edition = "2021"
# Keep the MSRV number here in sync with `test.yaml`/`build.rs`. We require Rust 1.73.
rust-version = "1.73"
description = "Low-level, unsafe bindings for the C99 library open62541, an open source and free implementation of OPC UA (OPC Unified Architecture)."
documentation = "https://docs.rs/open62541-sys"
readme = "README.md"
homepage = "https://github.com/HMIProject/open62541-sys"
repository = "https://github.com/HMIProject/open62541-sys.git"
license = "MPL-2.0"
keywords = ["opcua", "plc", "automation", "hardware", "protocol"]
categories = ["network-programming", "embedded", "external-ffi-bindings"]
include = [
    "CHANGELOG.md",
    "README.md",
    "build.rs",
    "src/",
    "wrapper.c",
    "wrapper.h",
    "open62541/**/CMakeLists.txt",
    "open62541/arch/",
    "open62541/deps/",
    # Exclude large dependencies that we do not use. If build fails, check first
    # if one of these is missing.
    "!open62541/deps/mdnsd/",
    "!open62541/deps/mqtt-c/",
    "!open62541/deps/nodesetLoader/",
    # We do not include OPC UA NodeSets. They are required when implementing OPC
    # UA servers: the `nodeset_compiler` tool uses these definitions to generate
    # custom C and header files that can be used in a server implementation. See
    # `open62541/doc/nodeset_compiler.rst` for details.
    "!open62541/deps/ua-nodeset/",
    # We require this file only to make sure the directory `ua-nodeset/` exists.
    "open62541/deps/ua-nodeset/readme.md",
    "open62541/doc/conf.py",
    "open62541/include/open62541/",
    "open62541/plugins/",
    "open62541/tools/certs/",
    "open62541/tools/cmake/",
    "open62541/tools/generate_*.py",
    "open62541/tools/nodeset_compiler/",
    "open62541/tools/open62541.pc.in",
    "open62541/tools/schema/",
]

[build-dependencies]
bindgen = { version = "0.69.4", features = ["experimental"] }
cc = "1.0.83"
cmake = "0.1.50"
vcpkg = "0.2.15"

[lints.rust]
future_incompatible = "warn"
let_underscore = "warn"
nonstandard_style = "warn"
rust_2018_compatibility = "warn"
rust_2018_idioms = "warn"
rust_2021_compatibility = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused = "warn"
warnings = "warn"

[lints.clippy]
as_conversions = "warn"
as_ptr_cast_mut = "warn"
as_underscore = "warn"
clone_on_ref_ptr = "warn"
missing_const_for_fn = "warn"
mod_module_files = "warn"
pedantic = "warn"

# This warns even when lint group and lint have the same level (`warn`). This is
# very misleading and results in lots of false positives. See
# https://github.com/rust-lang/rust-clippy/issues/12270
lint_groups_priority = "allow"

[package.metadata.vcpkg]
git = "https://github.com/microsoft/vcpkg"
rev = "1de2026"
dependencies = ["mbedtls"]

[package.metadata.vcpkg.target]
aarch64-apple-darwin = { triplet = "arm64-osx" }
armv7-unknown-linux-gnueabihf = { triplet = "arm-linux" }
x86_64-apple-darwin = { triplet = "x64-osx" }
x86_64-pc-windows-msvc = { triplet = "x64-windows-static-md" }
x86_64-unknown-linux-gnu = { triplet = "x64-linux" }
x86_64-unknown-linux-musl = { triplet = "x64-linux" }
